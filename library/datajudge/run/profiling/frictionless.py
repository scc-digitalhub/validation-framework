"""
Frictionless implementation of profiling plugin.
"""
# pylint: disable=import-error,invalid-name
import time
from typing import List, Optional

import frictionless
from frictionless import Resource

from datajudge.run.profiling.profiling_plugin import (ProfileTuple, Profiling,
                                                      RenderTuple)
from datajudge.utils.io_utils import write_bytesio


FN_PROFILE_JSON = "profile_frictionless.json"


class ProfilePluginFrictionless(Profiling):
    """
    Frictionless implementation of profiling plugin.
    """

    def update_library_info(self) -> None:
        """
        Update run's info about the validation framework used.
        """
        self.lib_name = frictionless.__name__
        self.lib_version = frictionless.__version__

    def parse_profile(self,
                      profile: Resource,
                      res_name: str) -> ProfileTuple:
        """
        Parse the profile generated by pandas profiling.
        """

        # Profile preparation
        rep = profile.to_dict()
       
        duration = self.registry.get_time(res_name)
        fields = rep.get("schema", {}).get("fields")
        try:
            rep.pop("schema")
        except KeyError:
            pass
        stats = rep

        return ProfileTuple(duration, stats, fields)

    def validate_profile(self, profile: Resource) -> None:
        """
        Validate the profile.
        """
        if not isinstance(profile, Resource):
            raise TypeError("Expected frictionless Resource!")

    def profile(self,
                res_name: str,
                data_path: str,
                profiler_kwargs: Optional[dict] = None
                ) -> Resource:
        """
        Generate frictionless profile.

        Parameters
        ----------
        **profiler_kwargs : dict, default = None
            Parameters for frictionless.Resource.

        """
        profile = self.registry.get_result(res_name)
        if profile is not None:
            return profile

        if profiler_kwargs is None:
            profiler_kwargs = {}

        start = time.perf_counter()
        profile = Resource(data_path, **profiler_kwargs)
        profile.infer()
        profile.expand()
        end = round(time.perf_counter() - start, 2)

        self.registry.add_result(res_name, profile, end)

        return profile

    def render_object(self,
                      obj: Resource) -> List[RenderTuple]:
        """
        Return a rendered profile ready to be persisted as artifact.
        """

        self.validate_profile(obj)

        string_json = obj.to_json()
        strio_json = write_bytesio(string_json)

        return [RenderTuple(strio_json, FN_PROFILE_JSON)]
