"""
Frictionless implementation of profiling plugin.
"""
# pylint: disable=import-error,invalid-name
from __future__ import annotations

import typing
from typing import List

import frictionless
from frictionless import Resource

from datajudge.run.plugin.profiling.profiling_plugin import Profiling
from datajudge.run.plugin.base_plugin import PluginBuilder
from datajudge.utils.io_utils import write_bytesio

if typing.TYPE_CHECKING:
    from datajudge import DataResource
    from datajudge.run.plugin.base_plugin import Result


class ProfilePluginFrictionless(Profiling):
    """
    Frictionless implementation of profiling plugin.
    """

    def __init__(self) -> None:
        super().__init__()
        self.resource = None
        self.exec_args = None

    def setup(self,
              resource: DataResource,
              exec_args: dict) -> None:
        """
        Set plugin resource.
        """
        self.resource = resource
        self.exec_args = exec_args

    def profile(self) -> Resource:
        """
        Do nothing.
        """
        profile = Resource(self.resource.tmp_pth,
                           **self.exec_args)
        profile.infer()
        profile.expand()
        return profile

    def produce_profile(self,
                        obj: Result) -> tuple:
        """
        Parse the profile generated by frictionless.
        """
        # Profile preparation
        rep = obj.artifact.to_dict()
        duration = obj.time
        fields = rep.get("schema", {}).get("fields")
        try:
            rep.pop("schema")
        except KeyError:
            pass
        stats = rep

        return self.get_profile_tuple(duration, stats, fields)

    def render_artifact(self, obj: Resource) -> List[tuple]:
        """
        Return a rendered profile ready to be persisted as artifact.
        """
        artifacts = []
        profile = write_bytesio(obj.to_json())
        filename = self._fn_profile.format("frictionless.json")
        artifacts.append(self.get_render_tuple(profile, filename))
        return artifacts

    @staticmethod
    def get_lib_name() -> str:
        """
        Get library name.
        """
        return frictionless.__name__

    @staticmethod
    def get_lib_version() -> str:
        """
        Get library version.
        """
        return frictionless.__version__


class ProfileBuilderFrictionless(PluginBuilder):
    """
    Profile plugin builder.
    """

    def build(self,
              package: list,
              exec_args: dict,
              *args) -> ProfilePluginFrictionless:
        """
        Build a plugin.
        """
        plugins = []
        for resource in package:
            plugin = ProfilePluginFrictionless()
            plugin.setup(resource, exec_args)
            plugins.append(plugin)
        return plugins
