"""
Frictionless implementation of profiling plugin.
"""
# pylint: disable=import-error,invalid-name
import time
from typing import List, Optional

import frictionless
from frictionless import Resource

from datajudge.run.plugin.profiling.profiling_plugin import Profiling
from datajudge.utils.io_utils import write_bytesio


class ProfilePluginFrictionless(Profiling):
    """
    Frictionless implementation of profiling plugin.
    """

    def update_library_info(self) -> None:
        """
        Update run's info about the validation framework used.
        """
        self.lib_name = frictionless.__name__
        self.lib_version = frictionless.__version__

    def parse_profile(self,
                      profile: Resource,
                      res_name: str) -> tuple:
        """
        Parse the profile generated by pandas profiling.
        """

        # Profile preparation
        rep = profile.to_dict()

        duration = self.registry.get_time(res_name)
        fields = rep.get("schema", {}).get("fields")
        try:
            rep.pop("schema")
        except KeyError:
            pass
        stats = rep

        return self.get_profile_tuple(duration, stats, fields)

    def validate_profile(self, profile: Resource) -> None:
        """
        Validate the profile.
        """
        if not isinstance(profile, Resource):
            raise TypeError("Expected frictionless Resource!")

    def profile(self,
                res_name: str,
                data_path: str,
                exec_args: dict
                ) -> Resource:
        """
        Generate frictionless profile.

        Parameters
        ----------
        **exec_args : dict, default = None
            Parameters for frictionless.Resource.

        """
        start = time.perf_counter()
        profile = Resource(data_path, **exec_args)
        profile.infer()
        profile.expand()
        end = round(time.perf_counter() - start, 2)

        result = self.get_outcome(profile)

        self.registry.add_result(res_name, profile, result, end)

        return profile

    def get_outcome(self, obj: Resource) -> str:
        """
        Return status of the execution.
        """
        if obj is not None and obj != {}:
            return self._VALID_STATUS
        return self._INVALID_STATUS

    def render_artifact(self,
                        obj: Resource) -> List[tuple]:
        """
        Return a rendered profile ready to be persisted as artifact.
        """
        self.validate_profile(obj)
        profile = write_bytesio(obj.to_json())
        filename = self._fn_profile.format("frictionless.json")
        return [self.get_render_tuple(profile, filename)]
